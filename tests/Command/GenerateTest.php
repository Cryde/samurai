<?php
namespace Samurai\Command;

use Samurai\Composer\Project;
use Samurai\Samurai;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

class GenerateTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     */
    public function testDefault()
    {

        $questionHelper = $this->getMock('Symfony\Component\Console\Helper\QuestionHelper', array('ask'));

        $questionHelper->expects($this->at(0))
            ->method('ask')
            ->will($this->returnValue('vendor/package'));


        $application = new Application();
        $samurai = new Samurai($application);

        $command = $application->find('new');
        $command->getHelperSet()->set($questionHelper, 'question');

        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName()
        ]);

        $this->assertRegExp('/Generated by Samurai in \d+\.\d{2} sec. Banzai!/', $commandTester->getDisplay());

        /**
         * @var Project $project
         */
        $project = $samurai->getServices()['composer']->getProject();
        $this->assertSame('vendor/package', $project->getName());
        $this->assertSame('raphhh/php-lib-bootstrap', $project->getBootstrapName());
        $this->assertSame('', $project->getBootstrapVersion());
        $this->assertSame('vendor/package', $project->getDirectoryPath());
        $this->assertSame('', $project->getDescription());
        $this->assertSame('', $project->getHomepage());
        $this->assertSame([], $project->getKeywords());
    }

    public function testFilled()
    {

        $questionHelper = $this->getMock('Symfony\Component\Console\Helper\QuestionHelper', array('ask'));

        $questionHelper->expects($this->at(0))
            ->method('ask')
            ->will($this->returnValue('vendor/package'));

        $questionHelper->expects($this->at(1))
            ->method('ask')
            ->will($this->returnValue('desc'));

        $questionHelper->expects($this->at(2))
            ->method('ask')
            ->will($this->returnValue('http://website.com'));

        $questionHelper->expects($this->at(3))
            ->method('ask')
            ->will($this->returnValue(' k1 , k2'));


        $application = new Application();
        $samurai = new Samurai($application);

        $command = $application->find('new');
        $command->getHelperSet()->set($questionHelper, 'question');

        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),
            'bootstrap' => 'vendor/bootstrap',
            'version' => '1.0.0',
            '--dir' => 'dir/path',
            '--repo' => 'repo',
        ]);

        $this->assertRegExp('/Generated by Samurai in \d+\.\d{2} sec. Banzai!/', $commandTester->getDisplay());

        /**
         * @var Project $project
         */
        $project = $samurai->getServices()['composer']->getProject();
        $this->assertSame('vendor/package', $project->getName());
        $this->assertSame('vendor/bootstrap', $project->getBootstrapName());
        $this->assertSame('1.0.0', $project->getBootstrapVersion());
        $this->assertSame('dir/path', $project->getDirectoryPath());
        $this->assertSame('desc', $project->getDescription());
        $this->assertSame('http://website.com', $project->getHomepage());
        $this->assertSame(['k1', 'k2'], $project->getKeywords());
    }


}
